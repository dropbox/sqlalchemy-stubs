[case testColumnFieldsInferred]
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(String)

user: User
reveal_type(user.id)  # E: Revealed type is 'builtins.int*'
reveal_type(User.name)  # E: Revealed type is 'sqlalchemy.sql.schema.Column[Union[builtins.str*, None]]'
[out]

[case testTypeEngineCovariance]
from sqlalchemy import Column, Integer, String
from sqlalchemy.sql.type_api import TypeEngine

from typing import TypeVar, Optional
T = TypeVar('T', bound=int)

def func(tp: TypeEngine[Optional[T]]) -> T: ...
reveal_type(func(Integer()))  # E: Revealed type is 'builtins.int*'
func(String())  # E: Value of type variable "T" of "func" cannot be "str"
[out]

[case testColumnFieldsInferredInstance]
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer(), primary_key=True)
    name = Column(String(), nullable=False)

user: User
reveal_type(user.id)  # E: Revealed type is 'builtins.int*'
reveal_type(User.name)  # E: Revealed type is 'sqlalchemy.sql.schema.Column[builtins.str*]'
[out]

[case testColumnFieldsRelationship]
from typing import TYPE_CHECKING

from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship, RelationshipProperty
from base import Base
if TYPE_CHECKING:
    from other import Other

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer(), primary_key=True)
    name = Column(String())
    other = relationship('Other', uselist=False)
    another: RelationshipProperty[Other] = relationship('Other')

user: User
reveal_type(user.other)  # E: Revealed type is 'other.Other*'
reveal_type(User.other)  # E: Revealed type is 'sqlalchemy.orm.relationships.RelationshipProperty[other.Other*]'
reveal_type(user.other.name)  # E: Revealed type is 'builtins.str*'

[file other.py]
from sqlalchemy import Column, Integer, String
from base import Base

class Other(Base):
    __tablename__ = 'other'
    id = Column(Integer(), primary_key=True)
    name = Column(String(), nullable=False)

[file base.py]
from sqlalchemy.ext.declarative import declarative_base
Base = declarative_base()
[out]

[case testTableColumns]
from typing import Any
from sqlalchemy import Table, MetaData, Column, Integer, String

metadata = MetaData()
users = Table('users', metadata,
              Column('id', Integer, primary_key=True),
              Column('name', String))

reveal_type(users.c.name)  # E: Revealed type is 'sqlalchemy.sql.schema.Column*[Any]'
[out]

[case testColumnFieldsInferred_python2]
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(String)

user = User()
reveal_type(user.id)  # E: Revealed type is 'builtins.int*'
reveal_type(User.name)  # E: Revealed type is 'sqlalchemy.sql.schema.Column[Union[builtins.unicode*, None]]'
[out]

[case testColumnFieldsInferredInstance_python2]
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer(), primary_key=True)
    name = Column(String(), default='John Doe')

user = User()
reveal_type(user.id)  # E: Revealed type is 'builtins.int*'
reveal_type(User.name)  # E: Revealed type is 'sqlalchemy.sql.schema.Column[builtins.unicode*]'
[out]
