[case testColumnFieldsInferred]
from typing import Any

from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String

Base: Any = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(String)

user: User
reveal_type(user.id)  # E: Revealed type is 'builtins.int*'
reveal_type(User.name)  # E: Revealed type is 'sqlalchemy.sql.schema.Column[builtins.str*]'
[out]

[case testColumnFieldsInferredInstance]
from typing import Any

from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String

Base: Any = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer(), primary_key=True)
    name = Column(String())

user: User
reveal_type(user.id)  # E: Revealed type is 'builtins.int*'
reveal_type(User.name)  # E: Revealed type is 'sqlalchemy.sql.schema.Column[builtins.str*]'
[out]

[case testColumnFieldsRelationship]
from typing import Any, TYPE_CHECKING

from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship
from base import Base
if TYPE_CHECKING:
    from other import Other

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer(), primary_key=True)
    name = Column(String())
    other = relationship('Other')

reveal_type(User.__init__)

user: User
reveal_type(user.other)  # E: Revealed type is 'main.Other*'
reveal_type(User.other)  # E: Revealed type is 'sqlalchemy.orm.relationships.RelationshipProperty[main.Other*]'
reveal_type(user.other.name)  # E: Revealed type is 'builtins.str*'

[file other.py]
from sqlalchemy import Column, Integer, String
from base import Base

class Other(Base):
    __tablename__ = 'other'
    id = Column(Integer(), primary_key=True)
    name = Column(String())

[file base.py]
from typing import Any
from sqlalchemy.ext.declarative import declarative_base
Base = declarative_base()
reveal_type(Base)
[out]

[case testTableColumns]
from typing import Any
from sqlalchemy import Table, MetaData, Column, Integer, String

metadata = MetaData()
users = Table('users', metadata,
              Column('id', Integer, primary_key=True),
              Column('name', String))

reveal_type(users.c.name)  # E: Revealed type is 'sqlalchemy.sql.schema.Column*[Any]'
[out]

[case testColumnFieldsInferred_python2]
from typing import Any

from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String

Base = declarative_base()  # type: Any

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(String)

user = User()
reveal_type(user.id)  # E: Revealed type is 'builtins.int*'
reveal_type(User.name)  # E: Revealed type is 'sqlalchemy.sql.schema.Column[builtins.str*]'
[out]

[case testColumnFieldsInferredInstance_python2]
from typing import Any

from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String

Base = declarative_base()  # type: Any

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer(), primary_key=True)
    name = Column(String())

user = User()
reveal_type(user.id)  # E: Revealed type is 'builtins.int*'
reveal_type(User.name)  # E: Revealed type is 'sqlalchemy.sql.schema.Column[builtins.str*]'
[out]
