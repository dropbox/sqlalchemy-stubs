[case testSelectableSelect]
from sqlalchemy import table, select, column, func

t = table('user', column('id'), column('name'), column('description'), column('articles'))
s = select(columns=[column('id'), column('name')],
           whereclause=column('name') == 'foo',
           from_obj=t,
           group_by=column('name'),
           having=func.count(column('articles')) > 2,
           order_by=column('id'),
           distinct=True,
           correlate=False,
           limit=10,
           offset=30)
[out]

[case testSelectableSelectIterables]
from sqlalchemy import table, select, column, alias, func

t = table('user', column('id'), column('name'), column('description'), column('articles'))
st = table('stuff', column('id'))
a = alias(t, 'my_user')
s = select(columns={column('id'), column('name'), a},
           whereclause='name == "foo"',
           from_obj=[t, 'stuff'],
           group_by=[column('name'), 'description'],
           having='count(articles) > 2',
           order_by=[column('id'), 'name', 1])
[out]

[case testSelectableSelectLimit]
from sqlalchemy import select

select().limit(None)
select().limit(10)
[out]

[case testSelectableSelectOffset]
from sqlalchemy import select

select().offset(None)
select().offset(10)
[out]

[case testSelectableSelectOrderByGroupBy]
from sqlalchemy import select, column

select() \
    .order_by('name', column('description')) \
    .group_by('name', column('description'))
[out]

[case testSelectableTableClauseInsert]
from typing import Any, Dict, Union
from sqlalchemy import table, column, String

t = table('user', column('id'), column('name'), column('description'), column('articles'))
t.insert({'name': 'foo'})
t.insert({column('name', String): 'foo'})
# t.insert({column('name', String): 'foo',
#          'description': 'bar'})
[out]

[case testSelectableOuterjoinOnclause]
from sqlalchemy import and_, column, table

t = table('user', column('id'), column('name'), column('description'), column('articles'))
st = table('stuff', column('id'))
st.outerjoin(t, onclause=and_(st.c.id == t.c.id, t.c.name == t.c.description))
[out]

[case testSelectableSelectWithForUpdateOfTable]
from sqlalchemy import table, select, column, alias, func

t1 = table('user', column('id'), column('name'), column('description'), column('articles'))
t2 = table('stuff', column('id'))
t1.join(t2).select().with_for_update(of=t1)
[out]

[case testExists]
from sqlalchemy import table, select, column, exists, literal, literal_column

t = table('table', column('id'), column('n'))

select([literal("1")]).where(~exists([t.c.id]))
exists((t.c.id,))
exists([t.c.id, 1])
exists(1, t.c.id)
exists(select(2))
exists(literal_column("x"))
exists([literal_column("x")])
exists([None])
exists((None,))
exists(None)
exists(1)
exists([11])
exists([1, 2, None])
exists(iter([1, 2, None]))
exists(0.0)
exists(True)
exists(True, False)
exists()

exists("fail")
exists([1, "fail"])
exists(True, [False])
exists(1, select(2))
[out]
main:24: error: Argument 1 to "Exists" has incompatible type "str"; expected "Iterable[Union[None, bool, int, float, Visitable, ColumnClause[Any]]]"
main:24: note: Following member(s) of "str" have conflicts:
main:24: note:     Expected:
main:24: note:         def __iter__(self) -> Iterator[Union[None, bool, int, float, Visitable, ColumnClause[Any]]]
main:24: note:     Got:
main:24: note:         def __iter__(self) -> Iterator[str]
main:25: error: List item 1 has incompatible type "str"; expected "Union[None, float, Visitable]"
main:26: error: No overload variant of "Exists" matches argument types "bool", "List[bool]"
main:26: note: Possible overload variants:
main:26: note:     def __init__(self, arg: Union[None, bool, int, float, SelectBase, ScalarSelect[Any], ColumnClause[Any]], **kwargs: Any) -> Exists
main:26: note:     def __init__(self, arg: Tuple[Union[SelectBase, ScalarSelect[Any]]], **kwargs: Any) -> Exists
main:26: note:     def __init__(self, arg: Iterable[Union[None, bool, int, float, Visitable, ColumnClause[Any]]], **kwargs: Any) -> Exists
main:26: note:     def __init__(self, *args: Union[None, bool, int, float, ColumnClause[Any]], **kwargs: Any) -> Exists
main:27: error: No overload variant of "Exists" matches argument types "int", "Select"
main:27: note: Possible overload variants:
main:27: note:     def __init__(self, arg: Union[None, bool, int, float, SelectBase, ScalarSelect[Any], ColumnClause[Any]], **kwargs: Any) -> Exists
main:27: note:     def __init__(self, arg: Tuple[Union[SelectBase, ScalarSelect[Any]]], **kwargs: Any) -> Exists
main:27: note:     def __init__(self, arg: Iterable[Union[None, bool, int, float, Visitable, ColumnClause[Any]]], **kwargs: Any) -> Exists
main:27: note:     def __init__(self, *args: Union[None, bool, int, float, ColumnClause[Any]], **kwargs: Any) -> Exists
