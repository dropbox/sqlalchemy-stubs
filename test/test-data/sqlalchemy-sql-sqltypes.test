[case testStringInit]
from typing import Any
from sqlalchemy.sql.sqltypes import String

s1 = String(length=10, collation='utf8', convert_unicode=False, _warn_on_bytestring=True)
s2 = String(length=10, collation='utf8', convert_unicode='force', unicode_error='strict')
s3 = String(length=10, collation='utf8', convert_unicode=False, unicode_error='strict')
[out]
main:6: error: No overload variant of "String" matches argument types "int", "str", "bool", "str"
main:6: note: Possible overload variants:
main:6: note:     def __init__(self, length: Optional[int] = ..., collation: Optional[str] = ..., convert_unicode: bool = ..., _warn_on_bytestring: bool = ...) -> String
main:6: note:     def __init__(self, length: Optional[int] = ..., collation: Optional[str] = ..., convert_unicode: str = ..., unicode_error: Optional[str] = ..., _warn_on_bytestring: bool = ...) -> String

[case testUnicodeInit]
from typing import Any
from sqlalchemy.sql.sqltypes import Unicode

u1 = Unicode(length=10, collation='utf8', convert_unicode=False, _warn_on_bytestring=True)
u2 = Unicode(length=10, collation='utf8', convert_unicode='force', unicode_error='strict')
u3 = Unicode(length=10, collation='utf8', convert_unicode=False, unicode_error='strict')
[out]
main:6: error: No overload variant of "Unicode" matches argument types "int", "str", "bool", "str"
main:6: note: Possible overload variants:
main:6: note:     def __init__(self, length: Optional[int] = ..., collation: Optional[str] = ..., convert_unicode: bool = ..., _warn_on_bytestring: bool = ...) -> Unicode
main:6: note:     def __init__(self, length: Optional[int] = ..., collation: Optional[str] = ..., convert_unicode: str = ..., unicode_error: Optional[str] = ..., _warn_on_bytestring: bool = ...) -> Unicode

[case testUnicodeTextInit]
from typing import Any
from sqlalchemy.sql.sqltypes import UnicodeText

u1 = UnicodeText(length=10, collation='utf8', convert_unicode=False, _warn_on_bytestring=True)
u2 = UnicodeText(length=10, collation='utf8', convert_unicode='force', unicode_error='strict')
u3 = UnicodeText(length=10, collation='utf8', convert_unicode=False, unicode_error='strict')
[out]
main:6: error: No overload variant of "UnicodeText" matches argument types "int", "str", "bool", "str"
main:6: note: Possible overload variants:
main:6: note:     def __init__(self, length: Optional[int] = ..., collation: Optional[str] = ..., convert_unicode: bool = ..., _warn_on_bytestring: bool = ...) -> UnicodeText
main:6: note:     def __init__(self, length: Optional[int] = ..., collation: Optional[str] = ..., convert_unicode: str = ..., unicode_error: Optional[str] = ..., _warn_on_bytestring: bool = ...) -> UnicodeText

[case testFloatAndDecimal]
from decimal import Decimal
from sqlalchemy import Column, Float, Numeric, Integer
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class Numbers(Base):
    __tablename__ = "numbers"
    id_ = Column(Integer, primary_key=True)

    c_numeric = Column(Numeric, nullable=False)
    c_float = Column(Float, nullable=False)

numbers_float = Numbers(c_numeric=1.0, c_float=1.0)
numbers_decimal = Numbers(c_numeric=Decimal(1.0), c_float=Decimal(1.0))
[out]
main:14: error: Incompatible type for "c_numeric" of "Numbers" (got "float", expected "Decimal")
main:15: error: Incompatible type for "c_float" of "Numbers" (got "Decimal", expected "float")
