[case queryFromSingleModel]
# flags: --strict-optional

from sqlalchemy import Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm.session import Session

Base = declarative_base()

class User(Base):
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)


session: Session

query = session.query(User)
reveal_type(query) # N: Revealed type is 'sqlalchemy.orm.query.Query[main.User]'


[case queryFromMultipleModels]
# flags: --strict-optional

from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm.session import Session

Base = declarative_base()


class Employee(Base):
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    email = Column(String, nullable=False)


class LoginInfo(Base):
    id = Column(Integer, ForeignKey(Employee.id), primary_key=True)
    password_hash = Column(String, nullable=False)


session: Session
query = session.query(Employee, LoginInfo)
reveal_type(query)  # N: Revealed type is 'sqlalchemy.orm.query.Query[Tuple[main.Employee, main.LoginInfo, fallback=sqlalchemy.util._collections.AbstractKeyedTuple[Any]]]'

[case queryFromModelAndColumn]
# flags: --strict-optional

from sqlalchemy import Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm.session import Session

Base = declarative_base()

class User(Base):
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)


session: Session

query = session.query(User, User.id)
reveal_type(query) # N: Revealed type is 'sqlalchemy.orm.query.Query[Tuple[main.User, builtins.int*, fallback=sqlalchemy.util._collections.AbstractKeyedTuple[Any]]]'


[case testQueryMethods]
# flags: --strict-optional

from sqlalchemy import Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import Session, Query

Base = declarative_base()

class User(Base):
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)


query: Query[User]
reveal_type(query.get(123)) # N: Revealed type is 'Union[main.User*, None]'
reveal_type(query.all()) # N: Revealed type is 'builtins.list[main.User*]'
reveal_type(iter(query)) # N: Revealed type is 'typing.Iterator[main.User*]'

[case usesAbstractKeyedTuple]
# flags: --strict-optional

from sqlalchemy import Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import Session, Query

Base = declarative_base()

class User(Base):
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)


session: Session
query = session.query(User.id, User.name)
reveal_type(query)  # N: Revealed type is 'sqlalchemy.orm.query.Query[Tuple[builtins.int*, builtins.str*, fallback=sqlalchemy.util._collections.AbstractKeyedTuple[Any]]]'
row = query.one()

col1, col2 = row
reveal_type(col1)  # N: Revealed type is 'builtins.int*'
reveal_type(col2)  # N: Revealed type is 'builtins.str*'

reveal_type(row.keys())  # N: Revealed type is 'builtins.list[builtins.str]'

x = row.allow_attribute_access
reveal_type(x)  # N: Revealed type is 'Any'

[case alwaysTupleForNonEntities]
# flags: --strict-optional

from sqlalchemy import Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import Session, Query

Base = declarative_base()

class User(Base):
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)


session: Session
query = session.query(User.id)
reveal_type(query)  # N: Revealed type is 'sqlalchemy.orm.query.Query[Tuple[builtins.int*, fallback=sqlalchemy.util._collections.AbstractKeyedTuple[Any]]]'


[case unsupportedStuffGeneratesAny]
# flags: --strict-optional

from sqlalchemy import Column, Integer, String, func
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import Session, Query

Base = declarative_base()

class User(Base):
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)


session: Session
query = session.query(func.count(User.id))
reveal_type(query)  # N: Revealed type is 'sqlalchemy.orm.query.Query[Any]'
