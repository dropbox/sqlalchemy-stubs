from typing import Any, Dict, Type, TypeVar, Generic

_T = TypeVar('_T')

class Annotated(Generic[_T]):
    __element: _T
    def __new__(cls, *args): ...
    def __init__(self, element: _T, values: Any) -> None: ...
    def __hash__(self): ...
    def __eq__(self, other): ...
    def _annotate(self, values): ...
    def _with_annotations(self, values): ...
    def _deannotate(self, values=..., clone: bool = ...): ...
    def _compiler_dispatch(self, visitor, **kw): ...
    def _constructor(self): ...
    def _clone(self): ...

annotated_classes: Dict[Type[Any], Type[Annotated[Any]]] = ...
