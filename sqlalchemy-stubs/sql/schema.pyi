from typing import Any, Optional, Set, Generic, TypeVar, overload, Type
from . import visitors
from .base import SchemaEventTarget as SchemaEventTarget, DialectKWArgs as DialectKWArgs
from .elements import ColumnClause as ColumnClause
from .selectable import TableClause as TableClause
from .type_api import TypeEngine

_T = TypeVar('_T')

RETAIN_SCHEMA: Any = ...
BLANK_SCHEMA: Any = ...

class SchemaItem(SchemaEventTarget, visitors.Visitable):
    __visit_name__: str = ...
    def get_children(self, **kwargs): ...
    @property
    def quote(self): ...
    @property
    def info(self): ...

class Table(DialectKWArgs, SchemaItem, TableClause):
    __visit_name__: str
    metadata: Any
    schema: Any
    indexes: Set[Any]
    constraints: Set[Any]
    foreign_keys: Set[Any]
    fullname: str
    implicit_returning: bool
    comment: Any
    def __new__(cls, *args, **kw): ...
    @property
    def quote_schema(self): ...
    def __init__(self, *args, **kw) -> None: ...
    @property
    def foreign_key_constraints(self): ...
    @property
    def key(self): ...
    @property
    def bind(self): ...
    def add_is_dependent_on(self, table): ...
    def append_column(self, column): ...
    def append_constraint(self, constraint): ...
    def append_ddl_listener(self, event_name, listener): ...
    def get_children(self, column_collections: bool = ..., schema_visitor: bool = ..., **kw): ...
    def exists(self, bind: Optional[Any] = ...): ...
    def create(self, bind: Optional[Any] = ..., checkfirst: bool = ...): ...
    def drop(self, bind: Optional[Any] = ..., checkfirst: bool = ...): ...
    def tometadata(self, metadata, schema: Any = ..., referred_schema_fn: Optional[Any] = ...,
                   name: Optional[Any] = ...): ...

class Column(SchemaItem, ColumnClause, Generic[_T]):
    __visit_name__: str = ...
    key: Any = ...
    primary_key: Any = ...
    nullable: bool = ...
    default: Any = ...
    server_default: Any = ...
    server_onupdate: Any = ...
    index: Any = ...
    unique: Any = ...
    system: Any = ...
    doc: Any = ...
    onupdate: Any = ...
    autoincrement: Any = ...
    constraints: Any = ...
    foreign_keys: Any = ...
    info: Any = ...
    @overload
    def __init__(self, name: str, type_: TypeEngine[_T], *args, **kwargs) -> None: ...
    @overload
    def __init__(self, type_: TypeEngine[_T], *args, **kwargs) -> None: ...
    @overload
    def __init__(self, name: str, type_: Type[TypeEngine[_T]], *args, **kwargs) -> None: ...
    @overload
    def __init__(self, type_: Type[TypeEngine[_T]], *args, **kwargs) -> None: ...
    @overload
    def __init__(self, *args, **kwargs) -> None: ...
    def references(self, column): ...
    def append_foreign_key(self, fk): ...
    def copy(self, **kw): ...
    def get_children(self, schema_visitor: bool = ..., **kwargs): ...
    @overload
    def __get__(self, instance: None, owner: Any) -> Column[_T]: ...
    @overload
    def __get__(self, instance: object, owner: Any) -> _T: ...

class ForeignKey(DialectKWArgs, SchemaItem):
    __visit_name__: str = ...
    constraint: Any = ...
    parent: Any = ...
    use_alter: Any = ...
    name: Any = ...
    onupdate: Any = ...
    ondelete: Any = ...
    deferrable: Any = ...
    initially: Any = ...
    link_to_name: Any = ...
    match: Any = ...
    info: Any = ...
    def __init__(self, column, _constraint: Optional[Any] = ..., use_alter: bool = ...,
                 name: Optional[Any] = ..., onupdate: Optional[Any] = ..., ondelete: Optional[Any] = ...,
                 deferrable: Optional[Any] = ..., initially: Optional[Any] = ..., link_to_name: bool = ...,
                 match: Optional[Any] = ..., info: Optional[Any] = ..., **dialect_kw) -> None: ...
    def copy(self, schema: Optional[Any] = ...): ...
    target_fullname: Any = ...
    def references(self, table): ...
    def get_referent(self, table): ...
    @property
    def column(self): ...

class _NotAColumnExpr(object):
    __clause_element__: Any = ...
    self_group: Any = ...

class DefaultGenerator(_NotAColumnExpr, SchemaItem):
    __visit_name__: str = ...
    is_sequence: bool = ...
    is_server_default: bool = ...
    column: Any = ...
    for_update: Any = ...
    def __init__(self, for_update: bool = ...) -> None: ...
    def execute(self, bind: Optional[Any] = ..., **kwargs): ...
    @property
    def bind(self): ...

class ColumnDefault(DefaultGenerator):
    arg: Any = ...
    def __init__(self, arg, **kwargs) -> None: ...
    @property
    def is_callable(self): ...
    @property
    def is_clause_element(self): ...
    @property
    def is_scalar(self): ...
    __visit_name__: Any = ...

class Sequence(DefaultGenerator):
    __visit_name__: str = ...
    is_sequence: bool = ...
    name: Any = ...
    start: Any = ...
    increment: Any = ...
    minvalue: Any = ...
    maxvalue: Any = ...
    nominvalue: Any = ...
    nomaxvalue: Any = ...
    cycle: Any = ...
    optional: Any = ...
    schema: Any = ...
    metadata: Any = ...
    def __init__(self, name, start: Optional[Any] = ..., increment: Optional[Any] = ...,
                 minvalue: Optional[Any] = ..., maxvalue: Optional[Any] = ..., nominvalue: Optional[Any] = ...,
                 nomaxvalue: Optional[Any] = ..., cycle: Optional[Any] = ..., schema: Optional[Any] = ...,
                 optional: bool = ..., quote: Optional[Any] = ..., metadata: Optional[Any] = ...,
                 quote_schema: Optional[Any] = ..., for_update: bool = ...) -> None: ...
    @property
    def is_callable(self): ...
    @property
    def is_clause_element(self): ...
    def next_value(self): ...
    @property
    def bind(self): ...
    def create(self, bind: Optional[Any] = ..., checkfirst: bool = ...): ...
    def drop(self, bind: Optional[Any] = ..., checkfirst: bool = ...): ...

class FetchedValue(_NotAColumnExpr, SchemaEventTarget):
    is_server_default: bool = ...
    reflected: bool = ...
    has_argument: bool = ...
    for_update: Any = ...
    def __init__(self, for_update: bool = ...) -> None: ...

class DefaultClause(FetchedValue):
    has_argument: bool = ...
    arg: Any = ...
    reflected: Any = ...
    def __init__(self, arg, for_update: bool = ..., _reflected: bool = ...) -> None: ...

class PassiveDefault(DefaultClause):
    def __init__(self, *arg, **kw) -> None: ...

class Constraint(DialectKWArgs, SchemaItem):
    __visit_name__: str = ...
    name: Any = ...
    deferrable: Any = ...
    initially: Any = ...
    info: Any = ...
    def __init__(self, name: Optional[Any] = ..., deferrable: Optional[Any] = ...,
                 initially: Optional[Any] = ..., _create_rule: Optional[Any] = ...,
                 info: Optional[Any] = ..., _type_bound: bool = ..., **dialect_kw) -> None: ...
    @property
    def table(self): ...
    def copy(self, **kw): ...

class ColumnCollectionMixin(object):
    columns: Any = ...
    def __init__(self, *columns, **kw) -> None: ...

class ColumnCollectionConstraint(ColumnCollectionMixin, Constraint):
    def __init__(self, *columns, **kw) -> None: ...
    def __contains__(self, x): ...
    def copy(self, **kw): ...
    def contains_column(self, col): ...
    def __iter__(self): ...
    def __len__(self): ...

class CheckConstraint(ColumnCollectionConstraint):
    sqltext: Any = ...
    def __init__(self, sqltext, name: Optional[Any] = ..., deferrable: Optional[Any] = ...,
                 initially: Optional[Any] = ..., table: Optional[Any] = ..., info: Optional[Any] = ...,
                 _create_rule: Optional[Any] = ..., _autoattach: bool = ..., _type_bound: bool = ...) -> None: ...
    __visit_name__: Any = ...
    def copy(self, target_table: Optional[Any] = ..., **kw): ...

class ForeignKeyConstraint(ColumnCollectionConstraint):
    __visit_name__: str = ...
    onupdate: Any = ...
    ondelete: Any = ...
    link_to_name: Any = ...
    use_alter: Any = ...
    match: Any = ...
    elements: Any = ...
    def __init__(self, columns, refcolumns, name: Optional[Any] = ..., onupdate: Optional[Any] = ...,
                 ondelete: Optional[Any] = ..., deferrable: Optional[Any] = ..., initially: Optional[Any] = ...,
                 use_alter: bool = ..., link_to_name: bool = ..., match: Optional[Any] = ...,
                 table: Optional[Any] = ..., info: Optional[Any] = ..., **dialect_kw) -> None: ...
    @property
    def referred_table(self): ...
    @property
    def column_keys(self): ...
    def copy(self, schema: Optional[Any] = ..., target_table: Optional[Any] = ..., **kw): ...

class PrimaryKeyConstraint(ColumnCollectionConstraint):
    __visit_name__: str = ...
    def __init__(self, *columns, **kw) -> None: ...
    @property
    def columns_autoinc_first(self): ...

class UniqueConstraint(ColumnCollectionConstraint):
    __visit_name__: str = ...

class Index(DialectKWArgs, ColumnCollectionMixin, SchemaItem):
    __visit_name__: str = ...
    table: Any = ...
    expressions: Any = ...
    name: Any = ...
    unique: Any = ...
    info: Any = ...
    def __init__(self, name, *expressions, **kw) -> None: ...
    @property
    def bind(self): ...
    def create(self, bind: Optional[Any] = ...): ...
    def drop(self, bind: Optional[Any] = ...): ...

DEFAULT_NAMING_CONVENTION: Any = ...

class MetaData(SchemaItem):
    __visit_name__: str = ...
    tables: Any = ...
    schema: Any = ...
    naming_convention: Any = ...
    info: Any = ...
    def __init__(self, bind: Optional[Any] = ..., reflect: bool = ..., schema: Optional[Any] = ...,
                 quote_schema: Optional[Any] = ..., naming_convention: Any = ...,
                 info: Optional[Any] = ...) -> None: ...
    def __contains__(self, table_or_key): ...
    def is_bound(self): ...
    def bind(self): ...
    def clear(self): ...
    def remove(self, table): ...
    @property
    def sorted_tables(self): ...
    def reflect(self, bind: Optional[Any] = ..., schema: Optional[Any] = ..., views: bool = ...,
                only: Optional[Any] = ..., extend_existing: bool = ..., autoload_replace: bool = ...,
                **dialect_kwargs): ...
    def append_ddl_listener(self, event_name, listener): ...
    def create_all(self, bind: Optional[Any] = ..., tables: Optional[Any] = ..., checkfirst: bool = ...): ...
    def drop_all(self, bind: Optional[Any] = ..., tables: Optional[Any] = ..., checkfirst: bool = ...): ...

class ThreadLocalMetaData(MetaData):
    __visit_name__: str = ...
    context: Any = ...
    def __init__(self) -> None: ...
    def bind(self): ...
    def is_bound(self): ...
    def dispose(self): ...
