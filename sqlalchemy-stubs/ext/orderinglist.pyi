from typing import Any, Optional, Callable

def ordering_list(attr, count_from: Optional[Any] = ..., **kw): ...
def count_from_1(index: int, collection: Any) -> Any: ...
def count_from_0(index: int, collection: Any) -> Any: ...
def count_from_n_factory(start: int) -> Callable[[int, Any], Any]: ...

class OrderingList(list):
    ordering_attr: str = ...
    ordering_func: Callable[[int, Any], Any] = ...
    reorder_on_append: Any = ...
    def __init__(self, ordering_attr: Optional[str] = ..., ordering_func: Optional[Any] = ...,
                 reorder_on_append: bool = ...) -> None: ...
    def reorder(self): ...
    def append(self, entity): ...
    def insert(self, index, entity): ...
    def remove(self, entity): ...
    def __setitem__(self, index, entity): ...
    def __delitem__(self, index): ...
    def __setslice__(self, start, end, values): ...
    def __delslice__(self, start, end): ...
    def __reduce__(self): ...
